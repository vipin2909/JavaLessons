You are calling foo.bar()
This assumes that foo is in the same process as bar
What if, later on, you want to pull all Foo-related operations
into a seprate process

-> can you avoid changing your code

Proxy to the rescue

-> same interface, entirely different behaviour

This is called comunication proxy

-> other types: logging, virtual, guarding,...

Formal Defination->
A class that functions as an interface to a particular resource.
That resource may be remote, expensive to construct,
or may require logging or some other added functionality



Proxy provides an identical interface; decorator provides an
enhanced interface

Decorator typically aggregates (or has reference to) what it is decorating;
proxy doesn't have to

Proxy might not even be working with materialized object


Summary -> A proxy has same interface as the underlying object
-> To create a proxy, simply replicate the existing interface of an object
-> Add revelent functionality to the redefined member functions
-> Different Proxies ( Communication, logging, caching, etc.) have completly 
   different behaviours.


